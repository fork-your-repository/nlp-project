[
 {
  "repo": "learn-co-curriculum/phase-0-the-dom-editing-lab",
  "language": "JavaScript",
  "readme_contents": "# DOM Editing Lab\n\n## Learning Goals\n\n- Identify that DOM nodes are written as HTML\n\n## Introduction\n\nWe've started looking at the DOM and how it's created. Now it's time to see its\nstructure.\n\nIf you haven't already, **fork and clone** this lab into your local environment.\nNavigate into its directory in the terminal, then run `code .` to open the files\nin Visual Studio Code.\n\n## Identify That DOM Nodes Are Written As HTML\n\nIn the previous lesson, we learned that, when we load a web page in a browser,\nthe content we see in the DOM is a representation of the underlying HTML, CSS\nand JavaScript. If we were to view the DOM in Chrome Dev Tools (we'll learn how\nto do that shortly), we would see HTML that is a clone of the HTML found in the\nsource HTML file. As we learned earlier in the course, that HTML consists of\n_elements_ that in turn consist of HTML _tags_ and their content.\n\nWhen we're working in the DOM, the structure is the same. We can access objects\nin the DOM (called _nodes_) that consist of tags, just like the HTML elements\nthat make up the base HTML. Nodes and elements are not the same thing \u2014\nall elements in the DOM are nodes but not all nodes are HTML elements. However,\nwhen we're working in the DOM, the nodes we access and modify are virtually\nalways HTML elements.\n\n### The Structure of DOM Content\n\nWe'll start by going over how content in the DOM is structured using nodes. The\ninformation below should be familiar from what you've learned about HTML\nelements.\n\nDOM nodes most often have a starting tag and an ending tag. Examples include a\nparagraph:\n\n```html\n<p>I am a paragraph.</p>\n```\n\nor a `main` section:\n\n```html\n<main></main>\n```\n\nBecause they have both starting and ending tags, we can nest other nodes inside\nthem. The inner node is called a child node, and the outer node is called a\nparent node. To nest items, we simply add the child node and its content between\nits parent's starting and ending tags:\n\n```html\n<body>\n  <main>\n    <p>I am a nested paragraph, inside the main element, inside the body!</p>\n  </main>\n</body>\n```\n\nSome nodes only have a starting tag. Those are called _self-closing elements_ or\n_void elements_. Void elements do not have any content nested inside of them and\ncannot be parent nodes.\n\nAn example of a self-closing tag is an image:\n\n```html\n<img\n  src=\"https://media.giphy.com/media/3o6MbkZSYy4mI3gLYc/giphy.gif\"\n  alt=\"A cartoon gif\"\n/>\n```\n\nIn self-closing tags, the trailing `/` is optional. This is valid too:\n\n```html\n<img\n  src=\"https://media.giphy.com/media/3o6MbkZSYy4mI3gLYc/giphy.gif\"\n  alt=\"A cartoon gif\"\n>\n```\n\nEnough review, let's write some HTML!\n\n## Instructions\n\nStart by running the tests and taking a look through the errors. You'll see that\nthe tests are looking for certain content to be present in the HTML file.\n\nNext, open the `index.html` file in the browser using the instructions in the\nprevious lesson for your development environment.\n\nJust to speed things up a bit, paste the following code into `index.html`:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Introduction to the DOM Lab</title>\n  </head>\n  <body>\n    <!--All our work for this lesson will go here-->\n  </body>\n</html>\n```\n\nRefresh the browser page to see the changes.\n\nOpen the Google Developer Tools by clicking on the \"View\" menu and selecting\nDeveloper -> Developer Tools. The Elements tab should be selected but, if it\nisn't, click on it. Here we have the DOM representation of the HTML source\nloaded by the browser. You should see the `head` and `body` elements nested\ninside the `html` element. If the `body` element is collapsed, use the\ndisclosure triangle to expand it. You should see that the `body` element is,\ntemporarily, child-less. Let's go ahead and start adding some content in\n`index.html`.\n\n**Note**: the\n[disclosure triangle](https://en.wikipedia.org/wiki/Disclosure_widget) is the\ntriangle to the left of the `<body>` tag. When you first open the Elements tab,\nthe nodes are generally collapsed, hiding their contents. You can click the\ntriangle to expand the node and see its contents. Disclosure triangles are\nstandard for hiding information throughout Chrome DevTools. If you want to see\nmore, feel free to click on the triangle! You're not going to break anything.\n\n![Disclosure Triangle](https://curriculum-content.s3.amazonaws.com/phase-1/dom-editing-lab/disclosure-triangle.png)\n\nFirst, let's add a title to our page:\n\n```html\n<h1>My HTML adventure</h1>\n```\n\nRefresh the page to see the changes displayed in the browser. If you view the\nElements tab again, you should see that a new child node is nested inside the\n`body`. Finally, run the tests again; the first test should now be passing.\n\nNext, we'll add a paragraph below the title. We'll also add some highlighted\nbits of text to the paragraph to make it stand out a little.\n\n```html\n<p>\n  We're writing HTML markup to display in our <strong>browser</strong>. We're\n  basically telling computers what to do. <em>Neat!</em>\n</p>\n```\n\nSave the file and check out the page in the 'Elements' tab. What's happening\nabove is that we added some inline elements, `<strong>` and `<em>` to our\nparagraph to style things a little. The `<strong>` tag makes any text within\nlook **important**. It's usually bold in browsers by default. The `<em>` tag\nallows us to _emphasize_ certain text. This text is typically rendered as italic\nin browsers.\n\nRun the tests again; you should now have all but two of the tests passing.\n\nIn our paragraph, let's make \"HTML\" a hyperlink and link to the MDN definition.\nWe'll use the`<a>` tag for this. Add this to our existing `<p>`:\n\n```html\nWe're writing\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML\">HTML</a> markup to\ndisplay in our <strong>browser</strong>.\n```\n\nNotice that HTML attributes (in this case, the `href` attribute) are shown\nalongside their opening tag.\n\nLastly, we'll add a table below the paragraph to recap some of the stuff in\nthis lesson:\n\n```html\n<table>\n  <thead>\n    <tr>\n      <th>Element name</th>\n      <th>Display value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>h1</td>\n      <td>block</td>\n    </tr>\n    <tr>\n      <td>p</td>\n      <td>block</td>\n    </tr>\n    <tr>\n      <td>strong</td>\n      <td>inline</td>\n    </tr>\n    <tr>\n      <td>em</td>\n      <td>inline</td>\n    </tr>\n  </tbody>\n</table>\n```\n\nWoah. That's a **lot** of markup! If you take a look at the result, though,\nyou'll see that it's a fairly complex visual \u2014 it's a table! Our table\nconsists of a header and a body. The header allows us to give the columns a\nname, and the table body contains the rows of content. Both `<thead>` and\n`<tbody>` tags contains rows, which are represented as `<tr>` (table row). These\nrows then contain cells which form the table's columns. In the `<thead>` row,\ncells are represented as `<th>`, while cells in `<tbody>` have their content in\n`<td>` tags.\n\nThat's a _lot_ of nesting.\n\nLook again at the Elements tab. Expand out all the children of the `table`.\nThis is the DOM tree!\n\nWhen you're done, go ahead and run the tests. They should now all be passing.\n"
 },
 {
  "repo": "yankouskia/additional_5",
  "language": "JavaScript",
  "readme_contents": "# Brackets\n\n## Task\n\nImplement function `check(str, bracketsConfig)`, that for given brackets sequence will return `true` if it is correct and `false` otherwise\n\nIn the second param there is `bracketsConfig` - the array of pairs open-closed brackets. Each subarray includes only 2 elements - opening and closing bracket\n\n```js\ncheck('()', [['(', ')']]) // -> true\ncheck('((()))()', [['(', ')']]) // -> true\ncheck('())(', [['(', ')']]) // -> false\ncheck('([{}])', [['(', ')'], ['[', ']'], ['{', '}']]) // -> true\ncheck('[(])', [['(', ')'], ['[', ']']]) // -> false\ncheck('[]()', [['(', ')'], ['[', ']']]) // -> true\ncheck('[]()(', [['(', ')'], ['[', ']']]) // -> false\n\n// special case: opening and closing bracket can be the same :)\n\ncheck('||', [['|', '|']]) // -> true\ncheck('|()|', [['(', ')'], ['|', '|']]) // -> true\ncheck('|(|)', [['(', ')'], ['|', '|']]) // -> false\ncheck('|()|(||)||', [['(', ')'], ['|', '|']]) // -> true\n```\n\nWrite your code in `src/index.js`\n"
 },
 {
  "repo": "linuxacademy/cicd-pipeline-train-schedule-dockerdeploy",
  "language": "JavaScript",
  "readme_contents": "# cicd-pipeline-train-schedule-dockerdeploy\n\nThis is a simple train schedule app written using nodejs. It is intended to be used as a sample application for a series of hands-on learning activities.\n\n## Running the app\n\nYou need a Java JDK 7 or later to run the build. You can run the build like this:\n\n    ./gradlew build\n\nYou can run the app with:\n\n    ./gradlew npm_start\n\nOnce it is running, you can access it in a browser at http://localhost:8080\n"
 },
 {
  "repo": "brentley/ecsdemo-nodejs",
  "language": "Shell",
  "readme_contents": "![Build Status](https://codebuild.us-east-2.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoidDRkc2xFKzlVaVpRZXRiK1VrV3crbVNQMnJBNHdzQjQrVlQwaXdqVHdlYW94RU9jODN0R0I4WGJieEJLdjRldktxN3pCMWNTbW9YVUVPUmNzcVFCd0FjPSIsIml2UGFyYW1ldGVyU3BlYyI6Ikg0S29yNDFQUEVHMWVoN2wiLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&branch=master)\n\n# Amazon ECS Workshop\n\nThis is part of an Amazon ECS workshop at https://ecsworkshop.com\n"
 }
]